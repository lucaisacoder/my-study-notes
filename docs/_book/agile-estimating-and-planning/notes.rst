敏捷软件开发实践 估算与计划
======================================

:Contact: Lucas Hsueh <lucas_hsueh@hotmail.com>

:Date: 2020-09-01

:Topic: 敏捷, 用户故事, 计划 

:Abstracts: 这不是一本形而上学的书，作者在全书中都在强调计划和实践中计划的重要性。没有敏捷的计划，敏捷开发无从谈起。敏捷方法解决如何应对不断变化的需求，而敏捷计划则是为了解决不断变化的变化。虽然敏捷方法强调的是价值交付，不是承诺与计划，但是提出一些无法实现的承诺和计划毫无意义。书中给出了如何制定和管理计划的一些方法，重点在于指导具体实践，而不是形而上学的理论。


1 章节简介
-----------

本书目录：

::

    第I部分 问题与目标
        第1章 计划的目的
        第2章 计划失败的原因
        第3章 敏捷方法
    第II部分 估算大小
        第4章 使用故事点估算大小
        第5章 使用理想人天进行估算
        第6章 估算方法
        第7章 重估
        第8章 在故事点和理想人天之间进行选择
    第III部分 为价值制定计划
        第9章 确定主题的优先级
        第10章 确定经济优先级
        第11章 确定渴望度优先级
        第12章 分解用户故事
    第IV部分 进度计划
        第13章 发布计划精粹
        第14章 迭代计划
        第15章 选择迭代长度
        第16章 估算速度
        第17章 不确定性缓冲计划
        第18章 计划多团队项目
    第V部分 跟踪与交流
        第19章 监督发布计划
        第20章 监督迭代计划
        第21章 关于计划的沟通
    第VI部分 敏捷计划有效的原因
        第22章 敏捷计划有效的原因
    第VII部分 案例分析
        第23章 案例分析:Bomb Shelter Studio


本书分为7个部分23章节，分别论述了一下内容：

    - 第I部分介绍了什么是计划，计划的重要性，以及敏捷计划是什么。
    - 第II部分介绍了如何估算用户故事，这是计划中很重要的组成部分。
    - 第III部分介绍了指定计划的指导原则，从交付价值出发来组织计划。
    - 第IV部分介绍了制定计划的具体方法和步骤，重点是发布计划和迭代计划，另外也说明了加入缓冲的重要性。
    - 第V部分介绍了如何跟踪计划进度，如何针对计划和进度进行沟通。
    - 第VI部分总结了敏捷计划优于传统计划的地方
    - 第VII部分给出了具体案例分析。


2 阅读笔记
-----------

由于本书是针对实践的指导，所以在一些章节顺序上不太清晰，因此笔记部分为了更好归纳总结，并未按照目录顺序梳理。

2.1 为什么要做计划？
~~~~~~~~~~~~~~~~~~~~~

1. 计划的目的
    计划的终极目标是对价值的探求，为最终交付价值提供有力保障。

    在项目中，计划通常可以帮助我们：

    - 发现并降低风险
    - 发现并减少不确定性
    - 通过对比进展与计划，可以支持更好的决策
    - 良好运行的计划，可以帮助团队内外建立信任
    - 在项目成员间传递信息

2. 为什么传统计划会失败？
    很多好的产品因为良好的计划可以达成，但是也不乏一些失败的例子，作者给出了其中一些教训：

    - 计划着眼于任务或者活动，而不是聚焦在价值和特性交付上
        任务或活动多是具有关联性的，单一任务或活动的延误会向后传递，导致很多不确定性。根据帕金森定律 [#]_ 所说的，活动总是要到最后一刻才能完成，类似的糟糕定律还有墨菲定律 [#]_ 。
    - 个人在处理多任务中导致的延迟
        多任务并没有听起来那么高效，在任务切换调度的过程中总是需要消耗时间的，而且被推迟处理的任务有可能是其他工作的阻塞项，出来混还是要还的。
    - 没有明确的优先级或者遵守优先级顺序进行特性开发
        优先级可不是摆设，要发挥它的价值。
    - 忽略了过程中的不确定性，或者对困难估计不足
        这可能是最常见的问题了，受限于个人能力和经验，所以我想敏捷中BA的角色真的不能缺失。
    - 把估算的计划当作对甲方的承诺
        估算可能是一种假设的情况，好的估算可能比较接近实际，但是实践中依然有坑需要踩。

3. 敏捷了就不会失败？
    通过上面一条总结，可以看到传统计划的劣势，这些通过敏捷的方法可以得到解决。为什么呢？首先看看什么是敏捷。

    《敏捷宣言》 [#]_ 的核心价值：

    - 个体和互动 高于 流程和工具
    - 工作的软件 高于 详尽的文档
    - 客户合作 高于 合同谈判
    - 响应变化 高于 遵循计划

    在敏捷中价值交付始终是最重要的，它贯穿与开发过程、交付过程中。我们可以与上面的失败原因做对比：
    
    - 敏捷聚焦在价值和特性交付上
    - 以团队为单位工作，进行短周期迭代发布
    - 关注业务优先级
    - 小步快走适应变化，减少不确定性
    - 团队内外具有良好的协作沟通模式，注意检查与调整


4. 敏捷计划

    敏捷计划还是在敏捷价值上的扩展：适应变化。
    
    书中有个比喻，如果传统计划(如瀑布模型)是一场10公里跑，那敏捷计划就是一个60分钟的计时赛。传统计划有明确的目标，大家的努力方向就是尽快到达终点；而敏捷计划面对的是不确定的结果，大家能做的就是不断的适应变化，尽可能向前跑。如此比喻，似乎敏捷计划更贴近真实开发场景。

    敏捷计划的层次：

        .. figure:: figures/agile-planning-layered.jpg
            :width: 80%

    图比较好理解。

2.2 如何制定计划？
~~~~~~~~~~~~~~~~~~~~~

2.2.1  计划的分类
************************

1. 发布计划
    发布计划站在比较高的层次探讨时间规划和特性交付，粒度比较粗；发布的对象主要是用户故事/特性，而不是任务。
    
    .. figure:: figures/release-planning.jpg
        :width: 80%

    满意条件一般评价指标有进度、范围和资源情况，相应的发布计划可以分为日期驱动型的和特性交付驱动型的。

2. 迭代计划
    迭代计划讨论的是产品设计、软件设计，并不讨论细节实现或者具体任务分配。

    迭代计划可以分类为速度驱动型和承诺驱动型：

    .. figure:: figures/velocity-driven-sprint-planning.jpg
        :width: 80%

    .. figure:: figures/commitment-driven-sprint-planning.jpg
        :width: 80%

2.2.2 制定计划
************************

1. 估算用户故事
    
    A. 分类
        
        - 使用故事点估算大小
            故事点好于时间单位，估算得到相对大小，而不是绝对。

            适合用故事点估算的场景：

                - 跨特性的用户故事
                - 可以纯度量大小
                - 不适合理想人/天的场景

        - 使用理想人/天估算大小
            理想人/天不是日历时间，只是理想状态。

                - 跨团队理解方便
                - 需要方便的预测速度

    B. 估算的方法：
    
        - 专家意见
        - 类比其他用户故事
        - 用户故事分解，直到可以进行估算

    C. 重估
        只有当相对大小发生变更才需要重估。

    D. 分解用户故事

        - 按照数据边界分解
        - 按照操作边界分解
        - 去横除切
        - 忽略一些性能限制，优先考虑用户价值
        - 分解混合优先级的用户故事
        - 不要把用户故事分解成具体任务
        - 避免变化
        - 适当的组合用户故事


2. 选择迭代周期长度取决于几个方面因素

    - 与发布计划相匹配，留出至少4-5次反馈的机会
    - 不确定性的多少
    - 获得反馈的难易程度
    - 优先级能够保持多久不变更
    - 团队在没有外部反馈下的工作意愿
    - 迭代的系统开销
    - 对工作紧迫感的维持情况

3. 估算速度的方法

    - 使用历史值
    - 先进性一次迭代看看
    - 根据经验预测一下

    最靠谱的还是先试试看，如果不具备条件也可以使用历史值。
    
    无论选择什么方法，都需要明确一点：大致的正确好于准确的错误。


4. 确定用户故事优先级
    A. 计划是功能、进度和成本的最优解
    B. 确定主题的优先级 - 为价值制定计划

        - 经济价值： 用“渴望度”来间接度量
        - 成本：随时间变化，越晚实现成本越低
        - 新知识/技术收益： 对于产品可以降低目标不确定性；对于项目可以降低方法不确定性。
        - 减少风险： 进度风险、成本风险、功能风险、技术风险和商业风险。

    C. 经济优先级： 新收入、增量收入、留存收入和操作效率。
    D. 渴望都优先级

        - kano模型
            
            .. figure:: figures/kano.jpg
                :width: 80%

        - 问卷： 功能存在；功能缺失
        - 相对权重： 相对收益和相对惩罚

2.2.2 计划中的不确定性
************************

1. 缓冲的重要性
    估算总归是预估、估计的，在实际项目中不能成为承诺，需要为计划加入一定的缓冲，以平衡过程中的不确定性。

    缓冲分类：

        - 特性缓冲： 最小的特性集合 + 可选的特性
        - 进度缓冲： 预留一些时间
        - 混合缓冲： 多种方法相结合

2. 应对多团队项目的不确定性

    - 为估算建立共同的基准
    - 更早给用户故事添加细节
    - 进行前瞻性计划，用来协调计划时间表
    - 在计划中加入进度缓冲


2.3 怎么跟踪计划？
~~~~~~~~~~~~~~~~~~~~~

书中给了两个跟踪计划的原则：

- 跟踪任务量/故事点，而不是小组的理想人天/时间
- 跟踪团队的完成速度，而不是个人的完成速度

至于原因，答案已经在前文中了。

2.3.1 监督发布计划
************************

1. 发布燃尽图
    发布燃尽图常用的有曲线图和柱状图。

    .. figure:: figures/release-burndown-chart.jpg
        :width: 80%


    .. figure:: figures/bar-burndown-chart.jpg
        :width: 80%


2. 停车场图
    停车场图描述了每个topic的完成情况。

    .. figure:: figures/parking-lot-chart.jpg
        :width: 80%

2.3.2 监督迭代计划
************************

1. 任务看板

    .. figure:: figures/kanban.jpg
        :width: 80%

2. 迭代燃尽图

    .. figure:: figures/sprint-burndown-chart.jpg
        :width: 80%

2.3.3 如何沟通计划
************************

1. 沟通方式
    一般口头上的沟通无法完整达意，容易产生沟通障碍，所以最好还是拿数据说话，常用的方式有：

    - 沟通计划 - 甘特图
        甘特图描述的应当是用户故事、特性，而不是具体的任务。

        .. figure:: figures/gantt-chart.jpg
            :width: 80%

    - 沟通进度 - 发布燃尽图

        .. figure:: figures/release-bar-burndown-chart.jpg
            :width: 80%

2. 沟通时间
    沟通一般在计划周期结束的时候，比如迭代复盘与回顾，可以在已有数据的基础上分析并传递信息，另外也是当前周期结束的历史归档。

2.4 总结
~~~~~~~~~~~~~~~~~~~~~

1. 敏捷计划为什么有效？

    - 经常重新计划
    - 对大小和时间的估算是独立的
    - 在不通层次上制定计划
    - 基于特性而不是基于任务制定计划
    - 小的故事保持工作流畅
    - 每次迭代都需要消灭未完成的工作
    - 在团队层次上跟踪计划
    - 承认不确定性并为之计划
    - 敏捷估算和计划的12条指导原则
        - 让整个小组参与
        - 在不同层次上进行规划
        - 使用不同度量单位，让对规模和持续时间的估计保持独立
        - 用功能或者日期来体现不确定性
        - 经常重规划
        - 跟踪进度并沟通
        - 承认学习的重要性
        - 规划具有适当规模的功能
        - 确定功能优先级
        - 把估计和计划建立在事实上
        - 保留一些松驰度
        - 通过前瞻规划协调多个小组

2. 示例解析
    - 估算用户故事
    - 准备产品调查
    - 制定和发布计划
        - 计划第一次迭代
        - 发布计划
        - 计划第二次迭代
        - 修改发布计划
        - 沟通计划
    - 迭代开发


    

------

.. [#] 帕金森定律: 只要还有时间，工作就会不断扩展，直到用完所有的时间。工作会自动占满一个人所有可用的时间。如果一个人给自己安排了充裕的时间去完成一项工作，他就会放慢节奏或者增加其他项目以便用掉所有的时间。工作膨胀出来的复杂性会使工作显得很重要，在这种时间弹性很大的环境中入并不会感到轻松。相反会因为工作的拖沓、膨胀而苦闷、劳累，从而精疲力竭。
.. [#] 墨菲定律: 是指凡是可能出错的事均会出错。引申为“所有的程序都有缺陷”，或“若缺陷有很多个可能性，则它必然会朝往令情况最坏的方向发展”。
.. [#] 敏捷宣言：https://agilemanifesto.org/iso/zhchs/manifesto.html